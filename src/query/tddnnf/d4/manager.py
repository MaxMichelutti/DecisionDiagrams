"""module where all the queries functions are defined"""

import os
from typing import Dict

from pysmt.fnode import FNode

from src.query.tddnnf.manager import DDNNFQueryManager
from src.query.constants import (
    D4_DDNNF_FILE as _D4_DDNNF_FILE,
    CONDITION_D4_OUTPUT_OPTION as _CONDITION_D4_OUTPUT_OPTION)


class D4_DDNNFQueryManager(DDNNFQueryManager):
    """manager to handle all queries on T-dDNNF generated by the D4 compiler"""

    def __init__(
            self,
            source_folder: str,
            ddnnf_vars: int,
            refinement_mapping: Dict[int, FNode] | None = None,
            abstraction_mapping: Dict[FNode, int] | None = None):
        """
        initialize the manager
        Always provide either the refinement_mapping or the abstraction_mapping or both when initializing the object,
        otherwise a ValueError will be raises

        Args:
            source_folder (str): the path to the folder where the serialized compiled formula is stored
            ddnnf_vars (int): the number of variables in the compiled formula (including the existentially quantified ones)
            refinement_mapping (Dict[int, FNode]) [None]: the mapping of the indices on the compiled formula's abstraction to the atoms in its refinement
            abstraction_mapping (Dict[FNode, int]) [None]: the mapping of the atoms of the formula to the indices in the compiled formula's abstraction
        """
        super().__init__(source_folder, ddnnf_vars, refinement_mapping, abstraction_mapping)
        self.d4_file = os.path.join(self.source_folder, _D4_DDNNF_FILE)
        self.output_option = _CONDITION_D4_OUTPUT_OPTION
