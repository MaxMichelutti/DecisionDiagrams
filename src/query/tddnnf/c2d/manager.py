"""module where all the queries functions are defined"""

import os
import time
import subprocess
from typing import Dict

from pysmt.fnode import FNode

from src.query.tddnnf.manager import DDNNFQueryManager
from src.query.constants import (
    DDNNF_CONDITION_PATH as _DDNNF_CONDITION_PATH,
    TRANSLATED_FILE as _TRANSLATED_FILE,
    C2D_DDNNF_FILE as _C2D_DDNNF_FILE,
    CONDITION_C2D_OUTPUT_OPTION as _CONDITION_C2D_OUTPUT_OPTION)


class C2D_DDNNFQueryManager(DDNNFQueryManager):
    """manager to handle all queries on T-dDNNF generated by the C2D compiler"""

    def __init__(
            self,
            source_folder: str,
            ddnnf_vars: int,
            refinement_mapping: Dict[int, FNode] | None = None,
            abstraction_mapping: Dict[FNode, int] | None = None):
        """
        initialize the manager
        Always provide either the refinement_mapping or the abstraction_mapping or both when initializing the object,
        otherwise a ValueError will be raises

        Args:
            source_folder (str): the path to the folder where the serialized compiled formula is stored
            ddnnf_vars (int): the number of variables in the compiled formula (including the existentially quantified ones)
            refinement_mapping (Dict[int, FNode]) [None]: the mapping of the indices on the compiled formula's abstraction to the atoms in its refinement
            abstraction_mapping (Dict[FNode, int]) [None]: the mapping of the atoms of the formula to the indices in the compiled formula's abstraction
        """
        super().__init__(source_folder, ddnnf_vars, refinement_mapping, abstraction_mapping)

        self.d4_file = os.path.join(self.source_folder, _TRANSLATED_FILE)
        self.output_option = _CONDITION_C2D_OUTPUT_OPTION

        # translate formula in d4 format
        self._translate_formula()

    def __del__(self):
        """destructor"""
        # delete the translated file
        if os.path.exists(self.d4_file):
            os.remove(self.d4_file)

    def _translate_formula(self) -> None:
        """function to translate the formula from c2d to d4 format"""

        # formula should be in source_folder/dimacs.cnf.nnf
        c2d_nnf_path = os.path.join(self.source_folder, _C2D_DDNNF_FILE)

        # call the translation script
        start_time = time.time()
        process_result: subprocess.CompletedProcess = subprocess.run(
            [_DDNNF_CONDITION_PATH, "-i_c2d", c2d_nnf_path, "-o_d4", self.d4_file],
            check=False, capture_output=False).returncode
        if (process_result != 0):
            raise RuntimeError("Error translating formula to d4 format")
        translation_time = time.time() - start_time
